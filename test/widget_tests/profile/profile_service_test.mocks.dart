// Mocks generated by Mockito 5.0.16 from annotations
// in budgetium/test/widget_tests/profile/profile_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:graphql/src/cache/cache.dart' as _i4;
import 'package:graphql/src/core/core.dart' as _i3;
import 'package:graphql/src/graphql_client.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeIOSOptions_0 extends _i1.Fake implements _i2.IOSOptions {}

class _FakeAndroidOptions_1 extends _i1.Fake implements _i2.AndroidOptions {}

class _FakeLinuxOptions_2 extends _i1.Fake implements _i2.LinuxOptions {}

class _FakeWindowsOptions_3 extends _i1.Fake implements _i2.WindowsOptions {}

class _FakeWebOptions_4 extends _i1.Fake implements _i2.WebOptions {}

class _FakeMacOsOptions_5 extends _i1.Fake implements _i2.MacOsOptions {}

class _FakeDefaultPolicies_6 extends _i1.Fake implements _i3.DefaultPolicies {}

class _FakeLink_7 extends _i1.Fake implements _i3.Link {}

class _FakeGraphQLCache_8 extends _i1.Fake implements _i4.GraphQLCache {}

class _FakeQueryManager_9 extends _i1.Fake implements _i3.QueryManager {}

class _FakeObservableQuery_10 extends _i1.Fake implements _i3.ObservableQuery {}

class _FakeQueryResult_11 extends _i1.Fake implements _i3.QueryResult {}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i2.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IOSOptions get iOptions =>
      (super.noSuchMethod(Invocation.getter(#iOptions),
          returnValue: _FakeIOSOptions_0()) as _i2.IOSOptions);
  @override
  _i2.AndroidOptions get aOptions =>
      (super.noSuchMethod(Invocation.getter(#aOptions),
          returnValue: _FakeAndroidOptions_1()) as _i2.AndroidOptions);
  @override
  _i2.LinuxOptions get lOptions =>
      (super.noSuchMethod(Invocation.getter(#lOptions),
          returnValue: _FakeLinuxOptions_2()) as _i2.LinuxOptions);
  @override
  _i2.WindowsOptions get wOptions =>
      (super.noSuchMethod(Invocation.getter(#wOptions),
          returnValue: _FakeWindowsOptions_3()) as _i2.WindowsOptions);
  @override
  _i2.WebOptions get webOptions =>
      (super.noSuchMethod(Invocation.getter(#webOptions),
          returnValue: _FakeWebOptions_4()) as _i2.WebOptions);
  @override
  _i2.MacOsOptions get mOptions =>
      (super.noSuchMethod(Invocation.getter(#mOptions),
          returnValue: _FakeMacOsOptions_5()) as _i2.MacOsOptions);
  @override
  _i5.Future<void> write(
          {String? key,
          String? value,
          _i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#write, [], {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<String?> read(
          {String? key,
          _i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#read, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<bool> containsKey(
          {String? key,
          _i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#containsKey, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<void> delete(
          {String? key,
          _i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<Map<String, String>> readAll(
          {_i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
              Invocation.method(#readAll, [], {
                #iOptions: iOptions,
                #aOptions: aOptions,
                #lOptions: lOptions,
                #webOptions: webOptions,
                #mOptions: mOptions,
                #wOptions: wOptions
              }),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i5.Future<Map<String, String>>);
  @override
  _i5.Future<void> deleteAll(
          {_i2.IOSOptions? iOptions,
          _i2.AndroidOptions? aOptions,
          _i2.LinuxOptions? lOptions,
          _i2.WebOptions? webOptions,
          _i2.MacOsOptions? mOptions,
          _i2.WindowsOptions? wOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteAll, [], {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GraphQLClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphQLClient extends _i1.Mock implements _i6.GraphQLClient {
  MockGraphQLClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.DefaultPolicies get defaultPolicies =>
      (super.noSuchMethod(Invocation.getter(#defaultPolicies),
          returnValue: _FakeDefaultPolicies_6()) as _i3.DefaultPolicies);
  @override
  set defaultPolicies(_i3.DefaultPolicies? _defaultPolicies) =>
      super.noSuchMethod(Invocation.setter(#defaultPolicies, _defaultPolicies),
          returnValueForMissingStub: null);
  @override
  _i3.Link get link =>
      (super.noSuchMethod(Invocation.getter(#link), returnValue: _FakeLink_7())
          as _i3.Link);
  @override
  _i4.GraphQLCache get cache => (super.noSuchMethod(Invocation.getter(#cache),
      returnValue: _FakeGraphQLCache_8()) as _i4.GraphQLCache);
  @override
  _i3.QueryManager get queryManager =>
      (super.noSuchMethod(Invocation.getter(#queryManager),
          returnValue: _FakeQueryManager_9()) as _i3.QueryManager);
  @override
  set queryManager(_i3.QueryManager? _queryManager) =>
      super.noSuchMethod(Invocation.setter(#queryManager, _queryManager),
          returnValueForMissingStub: null);
  @override
  _i3.ObservableQuery watchQuery(_i3.WatchQueryOptions? options) =>
      (super.noSuchMethod(Invocation.method(#watchQuery, [options]),
          returnValue: _FakeObservableQuery_10()) as _i3.ObservableQuery);
  @override
  _i3.ObservableQuery watchMutation(_i3.WatchQueryOptions? options) =>
      (super.noSuchMethod(Invocation.method(#watchMutation, [options]),
          returnValue: _FakeObservableQuery_10()) as _i3.ObservableQuery);
  @override
  _i5.Future<_i3.QueryResult> query(_i3.QueryOptions? options) =>
      (super.noSuchMethod(Invocation.method(#query, [options]),
              returnValue: Future<_i3.QueryResult>.value(_FakeQueryResult_11()))
          as _i5.Future<_i3.QueryResult>);
  @override
  _i5.Future<_i3.QueryResult> mutate(_i3.MutationOptions? options) =>
      (super.noSuchMethod(Invocation.method(#mutate, [options]),
              returnValue: Future<_i3.QueryResult>.value(_FakeQueryResult_11()))
          as _i5.Future<_i3.QueryResult>);
  @override
  _i5.Stream<_i3.QueryResult> subscribe(_i3.SubscriptionOptions? options) =>
      (super.noSuchMethod(Invocation.method(#subscribe, [options]),
              returnValue: Stream<_i3.QueryResult>.empty())
          as _i5.Stream<_i3.QueryResult>);
  @override
  _i5.Future<_i3.QueryResult> fetchMore(_i3.FetchMoreOptions? fetchMoreOptions,
          {_i3.QueryOptions? originalOptions,
          _i3.QueryResult? previousResult}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchMore, [
                fetchMoreOptions
              ], {
                #originalOptions: originalOptions,
                #previousResult: previousResult
              }),
              returnValue: Future<_i3.QueryResult>.value(_FakeQueryResult_11()))
          as _i5.Future<_i3.QueryResult>);
  @override
  Map<String, dynamic>? readQuery(_i3.Request? request,
          {bool? optimistic = true}) =>
      (super.noSuchMethod(Invocation.method(
              #readQuery, [request], {#optimistic: optimistic}))
          as Map<String, dynamic>?);
  @override
  Map<String, dynamic>? readFragment(_i4.FragmentRequest? fragmentRequest,
          {bool? optimistic = true}) =>
      (super.noSuchMethod(Invocation.method(
              #readFragment, [fragmentRequest], {#optimistic: optimistic}))
          as Map<String, dynamic>?);
  @override
  void writeQuery(_i3.Request? request,
          {Map<String, dynamic>? data, bool? broadcast = true}) =>
      super.noSuchMethod(
          Invocation.method(
              #writeQuery, [request], {#data: data, #broadcast: broadcast}),
          returnValueForMissingStub: null);
  @override
  void writeFragment(_i4.FragmentRequest? fragmentRequest,
          {bool? broadcast = true, Map<String, dynamic>? data}) =>
      super.noSuchMethod(
          Invocation.method(#writeFragment, [fragmentRequest],
              {#broadcast: broadcast, #data: data}),
          returnValueForMissingStub: null);
  @override
  _i5.Future<List<_i3.QueryResult?>>? resetStore(
          {bool? refetchQueries = true}) =>
      (super.noSuchMethod(Invocation.method(
              #resetStore, [], {#refetchQueries: refetchQueries}))
          as _i5.Future<List<_i3.QueryResult?>>?);
  @override
  String toString() => super.toString();
}
