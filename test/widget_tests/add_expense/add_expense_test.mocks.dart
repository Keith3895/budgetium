// Mocks generated by Mockito 5.0.16 from annotations
// in budgetium/test/widget_tests/add_expense/add_expense_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:budgetium/pages/expense/add_expense_service.dart' as _i3;
import 'package:budgetium/services/graphql_client_util.dart' as _i5;
import 'package:budgetium/validators.dart' as _i2;
import 'package:graphql/client.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [FieldValidators].
///
/// See the documentation for Mockito's code generation for more information.
class MockFieldValidators extends _i1.Mock implements _i2.FieldValidators {
  MockFieldValidators() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
}

/// A class which mocks [AddExpenseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddExpenseService extends _i1.Mock implements _i3.AddExpenseService {
  MockAddExpenseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get testingFlag =>
      (super.noSuchMethod(Invocation.getter(#testingFlag), returnValue: false)
          as bool);
  @override
  set testingFlag(bool? _testingFlag) =>
      super.noSuchMethod(Invocation.setter(#testingFlag, _testingFlag),
          returnValueForMissingStub: null);
  @override
  _i4.Future<dynamic> addExpense(
          {_i5.GraphQLUtil? graphUtil,
          _i6.GraphQLClient? client,
          dynamic expenseObj}) =>
      (super.noSuchMethod(
          Invocation.method(#addExpense, [], {
            #graphUtil: graphUtil,
            #client: client,
            #expenseObj: expenseObj
          }),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  String toString() => super.toString();
}
